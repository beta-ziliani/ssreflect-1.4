Require Import mtac.

Require Import ssreflect.

Inductive CtxType : Type :=
  | CtxParam : Type -> CtxType
  | CtxBase : Type -> CtxType
  | CtxTele : forall {A : Type},
           (A -> CtxType) -> CtxType.

Notation "'<|' '|>' A" := (CtxBase A)
  (at level 100, A at next level).
Notation "'<|' x .. y '|>' A" := (CtxTele (fun x=> .. (CtxTele (fun y=>CtxBase A)).. ))
  (at level 100, x binder, y binder, A at next level).
Notation "'<|' 'phi' x .. y '|>' A" := (CtxTele (fun x=> .. (CtxTele (fun y=>CtxParam A)).. ))
  (at level 100, x binder, y binder, A at next level).
Notation "'<|' 'phi' '|>' A" := (CtxParam A)
  (at level 100, A at next level).




Definition ex1 := <| (x : nat) (y : nat) |> x > y.

Inductive hasCT : forall {A}, A -> CtxType -> Type :=
  | hasParam : forall {A : Type} (x : A), hasCT x (CtxParam A)
  | hasBase : forall {A : Type} (x : A), hasCT x (CtxBase A)
  | hasTele : forall {A : Type} {P} (t : forall x : A, P x) f, 
                (forall (x : A), hasCT (t x) (f x)) ->
                hasCT t (CtxTele f).

Definition bla : hasCT (fun x y: nat=>x + y) (<| phi x y : nat|> nat).
Proof.
  apply: hasTele.
  move=>x.
  apply: hasTele.
  move=>y.
  apply: hasParam.
Qed.

Definition bla' : hasCT (fun x y: nat=>x + y) (<| phi |> nat -> nat -> nat).
Proof.
  apply: hasParam.
Qed.

Definition bla'' : hasCT (fun x y: nat=>x + y) (<| |> nat -> nat -> nat).
Proof.
  apply: hasBase.
Qed.


Module WithList.

  Definition ProofNotFound : Exception.
    exact exception.
  Qed.

(*
  Program
  Definition lookup (p : Prop)  := 
    mfix f (s : list dyn) : M p :=
      mmatch s return M p with
      | [x s'] (Dyn p x) :: s' => ret x
      | [d s'] d :: s' => f s'
      | _ => raise ProofNotFound
      end.
 *)

  Program
  Definition tauto' :=
    mfix f (p : <| phi |> Prop) : M p :=
      mmatch p as p' return M p' with
      | True => ret I 
      | [p1 p2] p1 /\ p2 =>
           r1 <- f c p1 ;
           r2 <- f c p2 ;
           ret (conj r1 r2)
      | [p1 p2]  p1 \/ p2 =>
           mtry 
             r1 <- f c p1 ;
             ret (or_introl r1)
           with _ =>
             r2 <- f c p2 ;
             ret (or_intror r2)
           end
      | [p1 p2 : Prop] p1 -> p2 =>
           nu (x:p1),
             r <- f (Dyn p1 x :: c) p2;
             abs x r
      | [A (q:A -> Prop)] (forall x:A, q x) =>
           nu (x:A),
             r <- f c (q x);
             abs x r
      | [A (q:A -> Prop)] (exists x:A, q x) =>
           X <- evar A;
           r <- f c (q X);
           b <- is_evar X;
           if b then 
             raise ProofNotFound
           else
             ret (ex_intro q X r)
      | [p':Prop] p' => lookup p' c
      end.
  
  Definition tauto P := 
    tauto' nil P.

End WithList.



